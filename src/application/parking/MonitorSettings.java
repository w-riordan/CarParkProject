package application.parking;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.opencv.imgproc.Imgproc;

public class MonitorSettings {

	// Camera Settings
	/**
	 * The camera number to read from
	 */
	public static int camIndex = 0;

	// Thresholding Settings
	/**
	 * Should be set to either ADAPTIVE_THRESH_MEAN_C or
	 * ADAPTIVE_THRESH_GAUSSIAN_C from the Imgproc class
	 */
	public static int thresholdingType = Imgproc.ADAPTIVE_THRESH_MEAN_C;

	/**
	 * Should be set to integer that is odd and is greater or equal to 3 Is the
	 * size of each block used when thresholding.
	 */
	public static int thresholdingBlockSize = 9;

	/**
	 * This is a double that represents the difference required to detect an
	 * edge in adaptive thresholding
	 */
	public static double thresholdingChange = 0.0;

	// Morphology Settings
	/**
	 * Whether or not eroding is enabled
	 */
	public static boolean erodingEnabled = true;
	/**
	 * Defines the shape used for eroding, should be
	 * CV_SHAPE_CROSS,CV_SHAPE_ELLIPSE,CV_SHAPE_RECT
	 */
	public static int erodingShape = Imgproc.CV_SHAPE_ELLIPSE;

	/**
	 * This is the size of the eroding shape
	 */
	public static int erodingSize = 3;

	/**
	 * The number of times to erode the image
	 */
	public static int erodingIterations = 1;

	/**
	 * Whether or not dilating is enabled
	 */
	public static boolean dilatingEnabled = true;
	/**
	 * Defines the shape used for dilating, should be
	 * CV_SHAPE_CROSS,CV_SHAPE_ELLIPSE,CV_SHAPE_RECT
	 */
	public static int dilatingShape = Imgproc.CV_SHAPE_ELLIPSE;

	/**
	 * This is the size of the dilating shape
	 */
	public static int dilatingSize = 3;

	/**
	 * The number of times to dilate the image
	 */
	public static int dilatingIterations = 1;

	/// Detection Settings
	/**
	 * Drop any contours that aren't closed(Edges come full circle)
	 */
	public static boolean dropChildless = true;

	/**
	 * The number of Frames a space must be occupied before it is set as
	 * occupied. This elimates ghost objects (generated by noise) occupying
	 * spaces.
	 */
	public static int occupiedTime = 5;

	/**
	 * Whether the thresholdView is the threshold View generated by the adaptive
	 * thresholding or the manualy painted objects thresholded view.
	 */
	public static boolean objectThresholdView = false;

	/**
	 * The percentage of a space that needs to be occupied for it to be occupied
	 */
	public static double occupiedPercentage = 0.3;

	/**
	 * Loads the settings file fname
	 * 
	 * @param fname
	 *            - File
	 */
	public static void loadSettings(File fname) {
		try {
			FileInputStream f = new FileInputStream(fname);
			DataInputStream d = new DataInputStream(f);
			camIndex = d.readInt();
			// Thresholding Settings
			thresholdingType = d.readInt();
			thresholdingBlockSize = d.readInt();
			thresholdingChange = d.readDouble();
			// Morphology Settings
			erodingEnabled = d.readBoolean();
			erodingShape = d.readInt();
			erodingSize = d.readInt();
			erodingIterations = d.readInt();
			dilatingEnabled = d.readBoolean();
			dilatingShape = d.readInt();
			dilatingSize = d.readInt();
			dilatingIterations = d.readInt();
			// Detection Settings
			dropChildless = d.readBoolean();
			occupiedTime = d.readInt();
			objectThresholdView = d.readBoolean();
			occupiedPercentage = d.readDouble();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	/**
	 * Saves the settings as file fname
	 * 
	 * @param fname
	 *            - File
	 */
	public static void saveSettings(File fname) {
		FileOutputStream f;
		try {
			f = new FileOutputStream(fname);
			DataOutputStream d = new DataOutputStream(f);
			d.writeInt(camIndex);
			// Thresholding Settings
			d.writeInt(thresholdingType);
			d.writeInt(thresholdingBlockSize);
			d.writeDouble(thresholdingChange);
			// Morpholgy Settings
			d.writeBoolean(erodingEnabled);
			d.writeInt(erodingShape);
			d.writeInt(erodingSize);
			d.writeInt(erodingIterations);
			d.writeBoolean(dilatingEnabled);
			d.writeInt(dilatingShape);
			d.writeInt(dilatingSize);
			d.writeInt(dilatingIterations);
			// Detection Settings
			d.writeBoolean(dropChildless);
			d.writeInt(occupiedTime);
			d.writeBoolean(objectThresholdView);
			d.writeDouble(occupiedPercentage);
			d.close();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
